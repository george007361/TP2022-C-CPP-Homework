name: HW1_CI
on:
  pull_request:
  push: 
    branches: 
      - HW1_develop
jobs:
  Build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: cmake -B build
      - run: make -C build

  GTest_and_cov:
    name: GTest and coverage
    runs-on: ubuntu-latest
    needs: [Build]
    steps:
      - name: Checkout all the submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
          
      - name: Install gcov
        run: sudo apt install -y gcovr 
      
      - name: Build Tests
        uses: actions/checkout@v2
      - run: cmake -B build -DCOVERAGE=ON
      - run: make -C build
      
      - name: Run tests
        run: ./build/lib/utils/tests/test_utils
      - run: ./build/lib/restoraunt/tests/test_restoraunt
      
      - name: Generate coverage report
        run: cd ./build
      - run: gcovr -r . -x -o ./build/gcovrrep.xml
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }} 
          files: gcovrrep.xml

  Sanitizers:
    name: With sanitizers
    runs-on: ubuntu-latest
    needs: [Build]
    steps:
      - uses: actions/checkout@v2
      - run: cmake -B build -DSANITIZERS=ON
      - run: make -C build
      - run: ./build/main <examples/ex1.txt 

  Valgrind:
    name: With valgrind
    runs-on: ubuntu-latest
    needs: [Build]
    steps:
      - uses: actions/checkout@v2
      - name: Install valgrind
        run: sudo apt update
      - run: sudo apt install -y valgrind
      - run: cmake -B build
      - run: make -C build
      - name: run valgrind
        run: valgrind --leak-check=full --tool=memcheck ./build/main <examples/ex1.txt 

  Linters:
    name: With linters
    runs-on: ubuntu-latest
    needs: [Build]
    steps:
      - uses: actions/checkout@v2
      - name: Install linters
        run: chmod -x install_linters.sh 
      - run: sh install_linters.sh

      - name: clang-tidy
        run: find -name "*.c" -o -name "*.h" | egrep -v "gtest|build" | xargs clang-tidy-10 -p ./build/compile_commands.json
      
      - name: cppcheck
        run: find -name "*.c" -o -name "*.h" | egrep -v "gtest|build"| xargs cppcheck --enable=all --suppress=checkCastIntToCharAndBack --suppress=missingInclude
      
      - name: cpplint
        run: find -name "*.c" -o -name "*.h" | egrep -v "gtest|build" | xargs python3 -m cpplint --filter=-build/include_order,-legal/copyright,-readability/casting,-build/include_subdir,-whitespace/comments

      - name: clang-format
        run: find -name "*.c" -o -name "*.h" | egrep -v "gtest|build" | xargs clang-format-10 -dry-run -style=LLVM
  
  Scan_build:
    name: With scan-build
    runs-on: ubuntu-latest
    needs: [Build]
    steps:
      - uses: actions/checkout@v2
      - name: Install scan-build
        run: sudo apt install -y clang-tools
      - name: Cmake
        run: cmake -B build
      - name: Scan-Build
        run: scan-build make -C build


